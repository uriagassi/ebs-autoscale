namespace :deploy do

  task :snapshot do
    on primary(:app) do
      execute "BOTO_CONFIG=~/.boto #{repo_path}/bin/snapshot.py -t app_#{fetch(:application)}"
    end
  end
end

namespace :autoscale do

  task :aws_credentials do
    credential_file = fetch(:aws_credential_file, ENV['AWS_CREDENTIAL_FILE'])

    fetch(:aws_access_key_id) { -> { ENV['AWS_ACCESS_KEY_ID'] || Capistrano::Ec2tag.read_from_credential_file('AWSAccessKeyId', credential_file) } }

    fetch(:aws_secret_access_key) { -> { ENV['AWS_SECRET_ACCESS_KEY'] || Capistrano::Ec2tag.read_from_credential_file('AWSSecretKey', credential_file) } }

    fetch(:ec2) { -> { @ec2 ||= AWS::EC2.new({access_key_id: fetch(:aws_access_key_id), secret_access_key: fetch(:aws_secret_access_key), region: fetch(:aws_region, 'us-east-1')}.merge! fetch(:aws_params, {})) } }
  end

  task :setup_ami do

    run_locally do
      unless roles(:stub).empty?
        info 'Stub instance already exists'
        return
      end
      info "starting"

      info "creating image"
      instance = nil
      fetch(:ec2).instances.filter('ip-address', primary(:app).to_s).each do |inst|
        instance ||= inst
      end
      image = instance.create_image("#{fetch(:application)}-image-for-autoscale", description: 'auto generated by ebs-autoscale', no_reboot: true)
      info "creating image #{image.id} for #{instance.id}..."
      image.add_tag('Name', value: "AMI for #{fetch(:application)}")
      while image.state == :pending
        sleep(10)
      end
      info "image state: #{image.state}"
      new_instance_data = {
          availability_zone: instance.availability_zone,
                    key_name: instance.key_name,
                    security_group_ids: instance.security_groups.map(&:id),
                    instance_type: 't1.micro',
                    subnet: instance.subnet,
                    block_device_mappings: [{no_device: '', device_name: '/dev/sdf'}],
                    associate_public_ip_address: true
      }
      info "image created, creating stub instance - #{new_instance_data}"
      new_instance = image.run_instance new_instance_data
      new_instance.add_tag('Name', value: "#{fetch(:application)}-stub-instance")
      new_instance.add_tag('deploy', value: fetch(:stub_deploy_tag))
    end
  end

  before :setup_ami, :aws_credentials, :prepare_primary do
    on primary(:app) do
      unless roles(:stub).empty?
        info 'Stub instance already exists'
        return
      end
      info "uploading"
      upload! File.expand_path('../../../../bin/userdata.sh', __FILE__), './userdata.sh'
      upload! File.expand_path('../../../../bin/prep_instance.py', __FILE__), './prep_instance.py'

      execute "mv #{deploy_path} #{deploy_path}.static"

      info "done uploading"
    end
  end

  after :setup_ami, :revert_primary do
    on primary(:app) do
      unless roles(:stub).empty?
        info 'Stub instance already exists'
        return
      end
      info "reverting"
      execute "mv #{deploy_path}.static #{deploy_path}"
      info "done"
    end
  end

end

after :deploy, "deploy:snapshot"
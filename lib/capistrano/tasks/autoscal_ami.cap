load File.expand_path('../autoscale_base.cap', __FILE__)

namespace :autoscale do
  include EbsAutoscale::AutoscaleHelper

  task :setup_ami do

    run_locally do
      unless roles(:stub).empty?
        info 'Stub instance already exists'
        return
      end
      info "starting"

      info "creating image"
      instance = fetch(:primary_instance)
      image_name = "#{fetch(:application)}-image-for-autoscale"
      old_image_names = []
      fetch(:ec2).images.filter('name', image_name + '*').each { |i| old_image_names << i.name }
      image_name = get_next_name(image_name, old_image_names)
      image = instance.create_image(image_name, description: 'auto generated by ebs-autoscale', no_reboot: true)
      info "creating image #{image.id} for #{instance.id}..."
      image.add_tag('Name', value: "ami-for-#{fetch(:application)}")
      while image.state == :pending
        sleep(10)
      end
      info "image state: #{image.state}"
      new_instance_data = {
          availability_zone: instance.availability_zone,
          key_name: instance.key_name,
          security_group_ids: instance.security_groups.map(&:id),
          instance_type: 't1.micro',
          subnet: instance.subnet,
          block_device_mappings: [{no_device: '', device_name: '/dev/sdf'}],
          associate_public_ip_address: true
      }
      info "image created, creating stub instance - #{new_instance_data}"
      new_instance = image.run_instance new_instance_data
      new_instance.add_tag('Name', value: "#{fetch(:application)}-stub-instance")
      new_instance.add_tag('deploy', value: fetch(:stub_deploy_tag))
    end
  end

  task :update_ami do
    run_locally do
      instance = nil
      fetch(:ec2).instances.filter('ip-address', primary(:stub).to_s).each do |inst|
        instance ||= inst
      end
      image_name = "#{fetch(:application)}-image-for-autoscale"
      old_image_names = []
      fetch(:ec2).images.filter('name', image_name + '*').each { |i| old_image_names << i.name }
      image_name = get_next_name(image_name, old_image_names)
      image = instance.create_image(image_name, description: 'auto generated by ebs-autoscale', no_reboot: true)
      info "creating image #{image.id} for #{instance.id}..."
      image.add_tag('Name', value: "ami-for-#{fetch(:application)}")
    end
  end

  task :prepare_stub do
    on roles(:stub) do
      upload! File.expand_path('../../../../bin/userdata.sh', __FILE__), './userdata.sh'
      upload! File.expand_path('../../../../bin/prep_instance.py', __FILE__), './prep_instance.py'
      upload! File.expand_path('../../../../bin/create_mount.sh', __FILE__), './create_mount.sh'
    end
  end

  task :validate_stub_instance do
    fail 'stub already exists' unless roles(:stub).empty?
  end

  before :update_ami, 'autoscale:prepare_stub'

  before :update_ami, 'autoscale:aws_credentials'

  before :setup_ami, :validate_stub_instance
  before :setup_ami, :prepare_primary

  before :setup_ami, :fetch_primary_instance

  after :setup_ami, 'autoscale:revert_primary'
end